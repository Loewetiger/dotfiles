From 0f45872b36fcf46c49a6b885c28195cc1b40e779 Mon Sep 17 00:00:00 2001
From: Loewetiger <loewetiger@tuta.io>
Date: Thu, 2 Oct 2025 19:10:41 +0200
Subject: [PATCH 1/4] Add support for jjdescription

---
 harper-ls/src/backend.rs              |  4 +++
 harper-ls/src/jjdescription_parser.rs | 35 +++++++++++++++++++++++++++
 harper-ls/src/main.rs                 |  1 +
 3 files changed, 40 insertions(+)
 create mode 100644 harper-ls/src/jjdescription_parser.rs

diff --git a/harper-ls/src/backend.rs b/harper-ls/src/backend.rs
index a02e62db..2782f7dd 100644
--- a/harper-ls/src/backend.rs
+++ b/harper-ls/src/backend.rs
@@ -10,6 +10,7 @@ use crate::document_state::DocumentState;
 use crate::git_commit_parser::GitCommitParser;
 use crate::ignored_lints_io::{load_ignored_lints, save_ignored_lints};
 use crate::io_utils::fileify_path;
+use crate::jjdescription_parser::JjdescriptionParser;
 use anyhow::{Context, Result, anyhow};
 use futures::future::join;
 use harper_comments::CommentParser;
@@ -385,6 +386,9 @@ impl Backend {
             "git-commit" | "gitcommit" => {
                 Some(Box::new(GitCommitParser::new_markdown(markdown_options)))
             }
+            "jjdescription" => Some(Box::new(JjdescriptionParser::new_markdown(
+                markdown_options,
+            ))),
             "html" => Some(Box::new(HtmlParser::default())),
             "mail" | "plaintext" | "text" => Some(Box::new(PlainEnglish)),
             "typst" => Some(Box::new(Typst)),
diff --git a/harper-ls/src/jjdescription_parser.rs b/harper-ls/src/jjdescription_parser.rs
new file mode 100644
index 00000000..db06515b
--- /dev/null
+++ b/harper-ls/src/jjdescription_parser.rs
@@ -0,0 +1,35 @@
+use harper_core::Lrc;
+use harper_core::parsers::{Markdown, MarkdownOptions, Parser};
+
+/// A Harper parser for Jjdescription files
+#[derive(Clone)]
+pub struct JjdescriptionParser {
+    inner: Lrc<dyn Parser>,
+}
+
+impl JjdescriptionParser {
+    pub fn new(parser: Lrc<dyn Parser>) -> Self {
+        Self { inner: parser }
+    }
+
+    pub fn new_markdown(markdown_options: MarkdownOptions) -> Self {
+        Self::new(Lrc::new(Markdown::new(markdown_options)))
+    }
+}
+
+impl Parser for JjdescriptionParser {
+    fn parse(&self, source: &[char]) -> Vec<harper_core::Token> {
+        // Empty lines starting with "JJ:", since they are comments in jjdescription.
+        // They can't be fully removed, since then the errors would appear in the wrong places.
+        let text: String = source.iter().collect();
+        let filtered_lines: Vec<char> = text
+            .lines()
+            .map(|line| if line.starts_with("JJ:") { "" } else { line })
+            .collect::<Vec<_>>()
+            .join("\n")
+            .chars()
+            .collect();
+
+        self.inner.parse(&filtered_lines)
+    }
+}
diff --git a/harper-ls/src/main.rs b/harper-ls/src/main.rs
index 3c34fc64..e940b636 100644
--- a/harper-ls/src/main.rs
+++ b/harper-ls/src/main.rs
@@ -12,6 +12,7 @@ mod document_state;
 mod git_commit_parser;
 mod ignored_lints_io;
 mod io_utils;
+mod jjdescription_parser;
 mod pos_conv;
 
 use backend::Backend;
-- 
2.51.0

